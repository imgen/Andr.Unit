<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<!-- ***************************************************************** -->
<!-- **********Set Properties used by Various targets **************** -->
<!-- ***************************************************************** -->

  <!-- Project base dir is nant project base dir -->
  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>

  <!-- Other directories are derived from base -->
  <property name="project.src.dir" 
    value="${path::combine(project.base.dir,'src')}"/>
  <property name="project.solutions.dir" 
    value="${path::combine(project.base.dir,'solutions')}"/>
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>

  <!-- Root of the package file name -->
  <property name="package.name" 
    value="${project.name}-${package.version}${package.suffix}"/>

  <!-- Package directories -->
  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.solutions.dir" 
    value="${path::combine(package.working.dir,'solutions')}"/>

  <!-- Default build configuration -->
  <property name="build.config" value="debug"/>
  <property name="build.defines" value=""/>

  <!-- Default runtime configuration -->
  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">
    <if test="${framework::exists( framework )}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net-')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.netcf.runtime" value="${framework}"
        if="${string::starts-with(framework,'netcf-')}"
        unless="${property::exists('default.netcf.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
    </if>
  </foreach>

  <call target="set-${default.runtime}-runtime-config" />

<!-- ***************************************************************** -->
<!-- *********      FileSets Used by Various Targets       *********** -->
<!-- ***************************************************************** -->

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,NUNITLITE,${runtime.defines}"
        dynamic="true"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,NUNITLITE,${runtime.defines}"
	dynamic="true"/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">   
    <call target="set-${runtime.config}-runtime-config"/>
  </target>
  
  <target name="set-default-dot-net-runtime-config">
    <fail unless="${property::exists( 'default.net.runtime' )}"
      message="No versions of the .NET SDK were found"/>

    <call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-netcf-runtime-config">
    <fail unless="${property::exists( 'default.netcf.runtime' )}"
      message="No versions of the .NET Compact Framework SDK were found"/>

    <call target="set-${default.netcf.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
    <fail unless="${property::exists( 'default.mono.runtime' )}"
      message="No versions of the Mono runtime were found"/>

    <call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
    <fail unless="${framework::exists( 'net-1.0' )}"
      message=".NET 1.0 is not installed"/>
    <fail unless="${framework::sdk-exists( 'net-1.0' )}"
      message="The .NET 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="net-1.0"/>
    <property name="runtime.defines" value="NET,NET_1_0"/>
    <property name="nant.settings.currentframework" 
      value="net-1.0"/>
    <property name="test.platforms" value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-1.1-runtime-config">
    <fail unless="${framework::exists( 'net-1.1' )}"
      message=".NET 1.1 is not installed"/>
    <fail unless="${framework::sdk-exists( 'net-1.1' )}"
      message="The .NET 1.1 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="1.1"/>
    <property name="runtime.config" value="net-1.1"/>
    <property name="runtime.defines" value="NET,NET_1_1"/>
    <property name="nant.settings.currentframework" 
      value="net-1.1"/>
    <property name="test.platforms" value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>
	
  <target name="set-net-2.0-runtime-config">
    <fail unless="${framework::exists( 'net-2.0' )}"
      message=".NET 2.0 is not installed"/>
    <fail unless="${framework::sdk-exists( 'net-2.0' )}"
      message="The .NET 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="net-2.0"/>
    <property name="runtime.defines" value="NET,NET_2_0"/>
    <property name="nant.settings.currentframework" 
      value="net-2.0"/>
    <property name="test.platforms" value="net-2.0,mono-2.0"/>
  </target>
	
  <target name="set-net-3.0-runtime-config">
    <fail unless="${framework::exists( 'net-3.0' )}"
      message=".NET 3.0 is not installed"/>
    <fail unless="${framework::sdk-exists( 'net-3.0' )}"
      message="The .NET 3.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.0"/>
    <property name="runtime.config" value="net-3.0"/>
    <property name="runtime.defines" value="NET,NET_3_0"/>
    <property name="nant.settings.currentframework" 
      value="net-3.0"/>
    <property name="test.platforms" value="net-3.0,mono-3.0"/>
  </target>
	
  <target name="set-net-3.5-runtime-config">
    <fail unless="${framework::exists( 'net-3.5' )}"
      message=".NET 3.5 is not installed"/>
    <fail unless="${framework::sdk-exists( 'net-3.5' )}"
      message="The .NET 3.5 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="net"/>
    <property name="runtime.version" value="3.5"/>
    <property name="runtime.config" value="net-3.5"/>
    <property name="runtime.defines" value="NET,NET_3_5"/>
    <property name="nant.settings.currentframework" 
      value="net-3.5"/>
    <property name="test.platforms" value="net-3.5,mono-3.5"/>
  </target>
	
  <target name="set-netcf-1.0-runtime-config">
    <fail unless="${framework::exists( 'netcf-1.0' )}"
      message=".NET CF 1.0 is not installed"/>
    <fail unless="${framework::sdk-exists( 'netcf-1.0' )}"
      message="The .NET CF 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="netcf"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="netcf-1.0"/>
    <property name="runtime.defines" value="NETCF,NETCF_1_0"/>
    <property name="nant.settings.currentframework" 
      value="netcf-1.0"/>
    <property name="test.platforms" value="netcf-1.0"/>
  </target>
	
  <target name="set-netcf-2.0-runtime-config">
    <fail unless="${framework::exists( 'netcf-2.0' )}"
      message=".NET CF 2.0 is not installed"/>
    <fail unless="${framework::sdk-exists( 'netcf-2.0' )}"
      message="The .NET CF 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="netcf"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="netcf-2.0"/>
    <property name="runtime.defines" value="NETCF,NETCF_2_0"/>
    <property name="nant.settings.currentframework" 
      value="netcf-2.0"/>
    <property name="test.platforms" value="netcf-2.0"/>
  </target>
	
  <target name="set-mono-1.0-runtime-config">
    <fail unless="${framework::exists( 'mono-1.0' )}"
      message="Mono is not installed"/>
    <fail unless="${framework::sdk-exists( 'mono-1.0' )}"
      message="The Mono 1.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="1.0"/>
    <property name="runtime.config" value="mono-1.0"/>
    <property name="runtime.defines" value="MONO,MONO_1_0"/>
    <property name="nant.settings.currentframework" 
      value="mono-1.0"/>
    <property name="test.platforms" value="mono-1.0,mono-2.0,net-1.0,net-1.1,net-2.0"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
    <fail unless="${framework::exists( 'mono-2.0' )}"
      message="Mono is not installed"/>
    <fail unless="${framework::sdk-exists( 'mono-2.0' )}"
      message="The Mono 2.0 SDK is not configured or not installed"/>

    <property name="runtime.platform" value="mono"/>
    <property name="runtime.version" value="2.0"/>
    <property name="runtime.config" value="mono-2.0"/>
    <property name="runtime.defines" value="MONO,MONO_2_0"/>
    <property name="nant.settings.currentframework" 
      value="mono-2.0"/>
    <property name="test.platforms" value="mono-2.0,net-2.0"/>
  </target>

<!-- ***************************************************************** -->
<!-- **************** Internally used targets ************************ -->
<!-- ***************************************************************** -->

  <!-- Set up the build directory -->
  <target name="set-build-dir"
    depends="set-build-config,set-runtime-config">
    <property name="runtime.platform.dir"
      value="${path::combine(project.build.dir,runtime.platform)}"/>
    <property name="runtime.version.dir"
      value="${path::combine(runtime.platform.dir,runtime.version)}"/>
    <property name="current.build.dir" 
      value="${path::combine(runtime.version.dir,build.config)}"/>
  </target>
  
  <target name="make-build-dir" depends="set-build-dir">
    <mkdir dir="${current.build.dir}"
      unless="${directory::exists(current.build.dir)}"/>
  </target>

  <target name="create-zip" description="Create zip from existing image">
    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zip.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <copy todir="${package.src.dir}">
      <fileset basedir="${project.src.dir}">
        <include name="NUnitLite/**/*.cs"/>
        <include name="NUnitLiteTests/**/*.cs"/>
        <include name="TestResultConsole/**/*.cs"/>
      </fileset>
    </copy>

  </target>

  <target name="copy-solutions">
    <delete dir="${package.solutions.dir}" />
    <mkdir dir="${package.solutions.dir}"/>

    <copy todir="${package.solutions.dir}">
      <fileset basedir="${project.solutions.dir}">
        <include name="**/*.sln"/>
        <include name="**/*.csproj"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***           Dump configuration settings for debugging       *** -->
<!-- ***************************************************************** -->

  <target name="dump-settings" depends="set-build-dir">
    <echo>Project Directories</echo>
    <echo>  Base:      ${project.base.dir}</echo>
    <echo>   Source:   ${project.src.dir}</echo>
    <echo>   Build:    ${project.build.dir}</echo>
    <echo>   Package:  ${project.package.dir}</echo>
    <echo></echo>
    <echo>Runtime Versions</echo>
    <echo>  Supported: ${supported.frameworks}</echo>
    <echo>  Installed: ${installed.frameworks}</echo>
    <echo>  Default:   ${default.runtime}</echo>
    <echo>    .Net:    ${default.net.runtime}</echo>
    <echo>    Mono:    ${default.mono.runtime}</echo>
    <echo></echo>
    <echo>Current Configuration</echo>
    <echo>  Config:    ${build.config}</echo>
    <echo>  Runtime:   ${runtime.config}</echo>
    <echo>  Defines:   ${build.defines}</echo>
    <echo>  Version:   ${package.version}</echo>
    <echo>  Package:   ${package.name}</echo>
    <echo></echo>
    <echo>Current Working Directories</echo>
    <echo>  Build:     ${current.build.dir}</echo>
    <echo>  Package:   ${package.working.dir}</echo>
    <echo>   Source:   ${package.src.dir}</echo>
    <echo></echo>
    <echo>Current Framework and SDK Directories</echo>
    <echo>  ${framework::get-framework-directory(framework::get-target-framework())}</echo>
    <echo>  ${framework::get-sdk-directory(framework::get-target-framework())}</echo>
  </target>

</project>